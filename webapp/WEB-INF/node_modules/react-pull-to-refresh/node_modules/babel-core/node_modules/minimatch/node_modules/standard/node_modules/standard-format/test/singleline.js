var test = require('tape')
var fmt = require('../').transform

var noops = [
  {
    str: 'if (!opts) opts = {}\n',
    msg: 'Noop on single line conditional assignment'
  },

  {
    str: 'var g = { name: f, data: fs.readFileSync(f).toString() }\n',
    msg: 'Noop on single line object assignment'
  },
  {
    str: "{foo: 'bar'}\n",
    msg: 'Dont add padding to object braces'
  },
  {
    str: "var x = ['test.js', '**test/failing/**']\n",
    msg: 'Noop on singleline arrays'
  },
  {
    str: 'function x () {}\n',
    msg: 'Noop on named functions correctly spaced'
  },
  {
    str: 'window.wrapFunctionsUntil(1)\n',
    msg: 'Noop non-functions with function in the name'
  },
  {
    str: "import * as lib from 'lib'\n",
    msg: 'Noop ES2015 import'
  },
  {
    str: 'function* blarg (foo) {yield foo}\n',
    msg: 'Noop ES2015 generator'
  },
  {
    str: 'console.log(1 === 2 ? 3 : 4)\n',
    msg: 'Noop infix'
  },
  {
    str: 'test[0]\ntest\n',
    msg: 'allow newline after member accessor',
    issues: ['https://github.com/maxogden/standard-format/pull/93']
  },
  {
    str: 'test(test[0])\n',
    msg: "don't force newline on mid-expression member accessor",
    issues: ['https://github.com/maxogden/standard-format/pull/93']
  },
  {
    str: '// good comment\n',
    msg: 'Expect good comments to be unchanged'
  }
]

test('singleline noop expressions', function (t) {
  t.plan(noops.length)
  noops.forEach(function (obj) {
    t.equal(fmt(obj.str), obj.str, obj.msg)
  })
})

var transforms = [
  {
    str: 'var x = function() {}\n',
    expect: 'var x = function () {}\n',
    msg: 'Anonymous function spacing between keyword and arguments'
  },
  {
    str: 'var x = function (y){}\n',
    expect: 'var x = function (y) {}\n',
    msg: 'Anonymous function spacing between arguments and opening brace'
  },
  {
    str: 'function xx() {}\n',
    expect: 'function xx () {}\n',
    msg: 'Named function spacing between keyword and arguments'
  },
  {
    str: 'function xx (y){}\n',
    expect: 'function xx (y) {}\n',
