'use strict';
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = gulpAlex;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _alex = require('alex');

var _alex2 = _interopRequireDefault(_alex);

var _convertVinylToVfile = require('convert-vinyl-to-vfile');

var _convertVinylToVfile2 = _interopRequireDefault(_convertVinylToVfile);

var _gulpUtil = require('gulp-util');

var _vfileReporter = require('vfile-reporter');

var _vfileReporter2 = _interopRequireDefault(_vfileReporter);

var _through2 = require('through2');

var _through22 = _interopRequireDefault(_through2);

function gulpAlex() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return _through22['default'].obj(function (file, encoding, callback) {
    var error = null,
        convertedFile = undefined,
        report = undefined;

    if (!file || file.isNull()) {
      this.push();
      return callback();
    }

    convertedFile = (0, _convertVinylToVfile2['default'])(file);

    (0, _alex2['default'])(convertedFile);

    report = (0, _vfileReporter2['default'])(convertedFile, opts);
    if (report) {
      console.log(report);
    }

    if (opts.fail && convertedFile.messages.length > 0) {
      error = new _gulpUtil.PluginError('gulp-alex', {
        name: 'AlexError',
        message: 'Alex failed for ' + file.path
      });
    }

    callback(error, file);
  });
}

module.exports = exports['default'];