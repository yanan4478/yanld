{
  "name": "xo",
  "version": "0.7.1",
  "description": "JavaScript happiness style ❤️ XOXO",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/xo.git"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bin": {
    "xo": "cli.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "xo && node test.js"
  },
  "files": [
    "index.js",
    "cli.js"
  ],
  "keywords": [
    "cli-app",
    "cli",
    "xo",
    "xoxo",
    "hugs",
    "kisses",
    "happy",
    "happiness",
    "code",
    "quality",
    "style",
    "lint",
    "linter",
    "jscs",
    "jshint",
    "jslint",
    "eslint",
    "validate",
    "code style",
    "standard",
    "strict",
    "check",
    "checker",
    "verify",
    "enforce",
    "hint",
    "simple"
  ],
  "dependencies": {
    "arrify": "^1.0.0",
    "eslint": "^1.2.0",
    "eslint-config-xo": "^0.4.0",
    "get-stdin": "^4.0.1",
    "globby": "^2.1.0",
    "look-up": "^0.7.1",
    "meow": "^3.3.0",
    "object-assign": "^4.0.1",
    "update-notifier": "^0.5.0",
    "xo-init": "^0.2.0"
  },
  "devDependencies": {
    "ava": "0.0.4",
    "xo": "github:sindresorhus/xo#v0.6.1"
  },
  "gitHead": "a343eb43e3eda331b7f6bbc8d74fb094d1f8ac08",
  "readme": "<h1 align=\"center\">\n\t<br>\n\t<img width=\"400\" src=\"https://cdn.rawgit.com/sindresorhus/xo/bb540ee5cee63c32dae6b6d8e3d1626cb24ba8e8/media/logo.svg\" alt=\"XO\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> JavaScript happiness style ❤️ [XOXO](https://en.wiktionary.org/wiki/xoxo)\n\n[![Build Status](https://travis-ci.org/sindresorhus/xo.svg?branch=master)](https://travis-ci.org/sindresorhus/xo)\n\nEnforce strict code style. Never discuss code style on a pull request again!\n\nNo decision-making. No `.eslintrc`, `.jshintrc`, `.jscsrc` to manage. It just works!\n\nUses [ESLint](http://eslint.org) underneath, so issues regarding rules should should be opened over [there](https://github.com/eslint/eslint/issues).\n\n\n## Code style\n\n- Tab indentation\n- Semicolons\n- Single-quotes\n- No unused variables\n- Space after keyword `if (condition) {}`\n- Always `===` instead of `==`\n\n*Any of these can be [overridden](#rules) if necessary.*\n\nCheck out an [example](index.js) and the [ESLint rules](https://github.com/sindresorhus/eslint-config-xo/blob/master/index.js).\n\n\n## Install\n\n```\n$ npm install --global xo\n```\n\n\n## Usage\n\n```\n$ xo --help\n\n  Usage\n    $ xo [<file|glob> ...]\n\n  Options\n    --init          Add XO to your project\n    --compact       Compact output\n    --stdin         Validate code from stdin\n    --esnext        Enable ES2015 support and rules\n    --env           Environment preset  [Can be set multiple times]\n    --global        Global variable  [Can be set multiple times]\n    --ignore        Additional paths to ignore  [Can be set multiple times]\n    --space         Use space indent instead of tabs  [Default: 2]\n    --no-semicolon  Prevent use of semicolons\n\n  Examples\n    $ xo\n    $ xo index.js\n    $ xo *.js !foo.js\n    $ xo --esnext --space\n    $ xo --esnext --env=node --env=mocha\n\n  Tips\n    Put options in package.json instead of using flags so other tools can read it.\n```\n\n\n## Workflow\n\nThe recommended workflow is to add XO locally to your project and run it with the tests.\n\nSimply run `$ xo --init` to add XO to your `package.json`:\n\n### Before\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"scripts\": {\n\t\t\"test\": \"mocha\"\n\t},\n\t\"devDependencies\": {\n\t\t\"mocha\": \"^2.0.0\"\n\t}\n}\n```\n\n### After\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"scripts\": {\n\t\t\"test\": \"xo && mocha\"\n\t},\n\t\"devDependencies\": {\n\t\t\"mocha\": \"^2.0.0\",\n\t\t\"xo\": \"^0.5.0\"\n\t}\n}\n```\n\n## Config\n\nYou can configure some options in XO by putting it in `package.json`:\n\n```js\n{\n\t\"name\": \"my-awesome-project\",\n\t\"xo\": {\n\t\t\"envs\": [\"node\", \"mocha\"]\n\t}\n}\n```\n\n[Globals](http://eslint.org/docs/user-guide/configuring#specifying-globals) and [rules](http://eslint.org/docs/user-guide/configuring#configuring-rules) can be configured inline in files.\n\n### esnext\n\nType: `boolean`  \nDefault: `false`\n\nEnable ES2015 support and linting rules.\n\n### envs\n\nType: `array`  \nDefault: `['node']`\n\nWhich [environments](http://eslint.org/docs/user-guide/configuring#specifying-environments) your code is designed to run in. Each environment brings with it a certain set of predefined global variables.\n\n### globals\n\nType: `array`\n\nAdditional global variables your code accesses during execution.\n\n### ignores\n\nType: `array`\n\nSome [paths](https://github.com/sindresorhus/xo/blob/4a0db396766118d7918577d759cacb05cd99a354/index.js#L14-L20) are ignored by default. Additional ignores can be added here.\n\n### space\n\nType: `boolean`, `number`  \nDefault: `false` *(tab indentation)*\n\nSet it to `true` to get 2-space indentation or specify the number of spaces.\n\nThis option exists for pragmatic reasons, but I would strongly recommend you read [\"Why tabs are superior\"](http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/).\n\n### rules\n\nType: `object`  \n\nOverride any of the [default rules](https://github.com/sindresorhus/eslint-config-xo/blob/master/index.js). See the [ESLint docs](http://eslint.org/docs/rules/) for more info on each rule.\n\nPlease take a moment to consider if you really need to use this option.\n\n### semicolon\n\nType: `boolean`  \nDefault: `true` *(semicolons required)*\n\nSet it to `false` to enforce no-semicolon style.\n\n\n## FAQ\n\n#### Why not Standard?\n\nThe [Standard style](http://standardjs.com) is a really cool idea. I too wish we could have one style to rule them all! Unfortunately, they made the mistake of pushing their own style instead of the most popular one. I don't think it's realistic to convert everyone. In contrast, XO is more pragmatic and has no aspiration of being *the* style. XO does use tabs by default, but everything is configurable if necessary.\n\n#### Why not ESLint?\n\nXO is based on ESLint. This project started out as just a shareable ESLint config, but it quickly grew out of that. I wanted something even simpler. Just typing `xo` and be done. No decision-making. No config. I also have some exciting future plans for it. However, you can still get most of the XO benefits while using ESLint directly with the [ESLint shareable config](https://github.com/sindresorhus/eslint-config-xo).\n\n\n## Editor plugins\n\n- [Sublime Text](https://github.com/sindresorhus/SublimeLinter-contrib-xo)\n- [Atom](https://github.com/sindresorhus/atom-linter-xo)\n\n\n## Build-system plugins\n\n- [Gulp](https://github.com/sindresorhus/gulp-xo)\n- [Grunt](https://github.com/sindresorhus/grunt-xo)\n- [webpack](https://github.com/Semigradsky/xo-loader)\n\n\n## Configs\n\n- [eslint-config-xo](https://github.com/sindresorhus/eslint-config-xo) - ESLint shareable config for XO\n- [eslint-config-xo-space](https://github.com/sindresorhus/eslint-config-xo-space) - ESLint shareable config for XO with 2-space indent\n- [eslint-config-xo-react](https://github.com/sindresorhus/eslint-config-xo-react) - ESLint shareable config for React to be used with the above\n- [jscs-xo](https://github.com/sindresorhus/jscs-xo) - JSCS shareable preset for XO\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sindresorhus/xo/issues"
  },
  "homepage": "https://github.com/sindresorhus/xo#readme",
  "_id": "xo@0.7.1",
  "_shasum": "f2ffb81c9500a1f438d64c55a23d7d1c35949e3a",
  "_from": "sindresorhus/xo#v0.7.1",
  "_resolved": "git://github.com/sindresorhus/xo.git#a343eb43e3eda331b7f6bbc8d74fb094d1f8ac08"
}
