/**
 * Modules in this bundle
 * @license
 * 
 * empower:
 *   license: MIT
 *   author: Takuto Wada <takuto.wada@gmail.com>
 *   contributors: James Talmage
 *   homepage: http://github.com/power-assert-js/empower
 *   version: 1.1.0
 * 
 * array-filter:
 *   license: MIT
 *   author: Julian Gruber <mail@juliangruber.com>
 *   maintainers: juliangruber <julian@juliangruber.com>
 *   homepage: https://github.com/juliangruber/array-filter
 *   version: 1.0.0
 * 
 * array-foreach:
 *   license: MIT
 *   author: Takuto Wada <takuto.wada@gmail.com>
 *   homepage: https://github.com/twada/array-foreach
 *   version: 1.0.1
 * 
 * array-map:
 *   license: MIT
 *   author: James Halliday <mail@substack.net>
 *   maintainers: substack <mail@substack.net>
 *   homepage: https://github.com/substack/array-map
 *   version: 0.0.0
 * 
 * array-reduce:
 *   license: MIT
 *   author: James Halliday <mail@substack.net>
 *   maintainers: substack <mail@substack.net>
 *   homepage: https://github.com/substack/array-reduce
 *   version: 0.0.0
 * 
 * array-some:
 *   license: MIT
 *   author: Takuto Wada <takuto.wada@gmail.com>
 *   homepage: https://github.com/twada/array-some
 *   version: 1.0.0
 * 
 * deep-equal:
 *   license: MIT
 *   author: James Halliday <mail@substack.net>
 *   maintainers: substack <mail@substack.net>
 *   homepage: https://github.com/substack/node-deep-equal#readme
 *   version: 1.0.1
 * 
 * define-properties:
 *   license: MIT
 *   author: Jordan Harband
 *   maintainers: ljharb <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/define-properties#readme
 *   version: 1.1.2
 * 
 * escallmatch:
 *   license: MIT
 *   author: Takuto Wada <takuto.wada@gmail.com>
 *   homepage: https://github.com/twada/escallmatch
 *   version: 1.4.2
 * 
 * esprima:
 *   license: BSD-2-Clause
 *   author: Ariya Hidayat <ariya.hidayat@gmail.com>
 *   maintainers: ariya <ariya.hidayat@gmail.com>
 *   homepage: http://esprima.org
 *   version: 2.7.0
 * 
 * espurify:
 *   license: MIT
 *   author: Takuto Wada <takuto.wada@gmail.com>
 *   homepage: https://github.com/estools/espurify
 *   version: 1.3.0
 * 
 * estraverse:
 *   license: BSD-2-Clause
 *   maintainers: constellation <utatane.tea@gmail.com>, michaelficarra <npm@michael.ficarra.me>, nzakas <nicholas@nczconsulting.com>
 *   homepage: https://github.com/estools/estraverse
 *   version: 4.1.1
 * 
 * foreach:
 *   license: MIT
 *   author: Manuel Stofer <manuel@takimata.ch>
 *   maintainers: manuelstofer <manuel@takimata.ch>
 *   contributors: Manuel Stofer, Jordan Harband
 *   homepage: https://github.com/manuelstofer/foreach
 *   version: 2.0.5
 * 
 * function-bind:
 *   licenses: MIT
 *   author: Raynos <raynos2@gmail.com>
 *   maintainers: raynos <raynos2@gmail.com>
 *   contributors: Raynos
 *   homepage: https://github.com/Raynos/function-bind
 *   version: 0.1.0
 * 
 * has:
 *   licenses: MIT
 *   author: Thiago de Arruda <tpadilha84@gmail.com>
 *   maintainers: tarruda <tpadilha84@gmail.com>
 *   homepage: https://github.com/tarruda/has
 *   version: 0.0.1
 * 
 * indexof:
 *   maintainers: tjholowaychuk <tj@vision-media.ca>
 *   version: 0.0.1
 * 
 * isarray:
 *   license: MIT
 *   author: Julian Gruber <mail@juliangruber.com>
 *   maintainers: juliangruber <julian@juliangruber.com>
 *   homepage: https://github.com/juliangruber/isarray
 *   version: 0.0.1
 * 
 * object-create:
 *   licenses: MIT
 *   author: Thiago de Arruda <tpadilha84@gmail.com>
 *   maintainers: tarruda <tpadilha84@gmail.com>
 *   homepage: https://github.com/tarruda/object-create
 *   version: 0.1.0
 * 
 * object-define-property:
 *   licenses: MIT
 *   author: Thiago de Arruda <tpadilha84@gmail.com>
 *   maintainers: tarruda <tpadilha84@gmail.com>
 *   homepage: https://github.com/tarruda/object-define-property
 *   version: 0.1.0
 * 
 * object-keys:
 *   license: MIT
 *   author: Jordan Harband <ljharb@gmail.com>
 *   maintainers: ljharb <ljharb@gmail.com>
 *   contributors: Jordan Harband <ljharb@gmail.com>, Raynos <raynos2@gmail.com>, Nathan Rajlich <nathan@tootallnate.net>, Ivan Starkov <istarkov@gmail.com>, Gary Katsevman <git@gkatsev.com>
 *   homepage: https://github.com/ljharb/object-keys#readme
 *   version: 1.0.9
 * 
 * xtend:
 *   license: MIT
 *   author: Raynos <raynos2@gmail.com>
 *   maintainers: raynos <raynos2@gmail.com>
 *   contributors: Jake Verbaten, Matt Esch
 *   homepage: https://github.com/Raynos/xtend
 *   version: 4.0.1
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.empower = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * empower - Power Assert feature enhancer for assert function/object.
 *
 * https://github.com/power-assert-js/empower
 *
 * Copyright (c) 2013-2015 Takuto Wada
 * Licensed under the MIT license.
 *   https://github.com/power-assert-js/empower/blob/master/MIT-LICENSE.txt
 */
var defaultOptions = _dereq_('./lib/default-options');
var Decorator = _dereq_('./lib/decorator');
var capturable = _dereq_('./lib/capturable');
var create = _dereq_('object-create');
var slice = Array.prototype.slice;
var extend = _dereq_('xtend/mutable');
var define = _dereq_('define-properties');

/**
 * Enhance Power Assert feature to assert function/object.
 * @param assert target assert function or object to enhance
 * @param formatter power assert format function
 * @param options enhancement options
 * @return enhanced assert function/object
 */
function empower (assert, formatter, options) {
    var typeOfAssert = (typeof assert);
    var enhancedAssert;
    if ((typeOfAssert !== 'object' && typeOfAssert !== 'function') || assert === null) {
        throw new TypeError('empower argument should be a function or object.');
    }
    if (isEmpowered(assert)) {
        return assert;
    }
    switch (typeOfAssert) {
    case 'function':
        enhancedAssert = empowerAssertFunction(assert, formatter, options);
        break;
    case 'object':
        enhancedAssert = empowerAssertObject(assert, formatter, options);
        break;
    default:
        throw new Error('Cannot be here');
    }
    define(enhancedAssert, capturable());
    return enhancedAssert;
}

function empowerAssertObject (assertObject, formatter, options) {
    var config = extend(defaultOptions(), options);
    var target = config.destructive ? assertObject : create(assertObject);
    var decorator = new Decorator(target, formatter, config);
    return extend(target, decorator.enhancement());
}

function empowerAssertFunction (assertFunction, formatter, options) {
    var config = extend(defaultOptions(), options);
    if (config.destructive) {
        throw new Error('cannot use destructive:true to function.');
    }
    var decorator = new Decorator(assertFunction, formatter, config);
    var enhancement = decorator.enhancement();
    var powerAssert;
    if (typeof enhancement === 'function') {
        powerAssert = function powerAssert () {
            return enhancement.apply(null, slice.apply(arguments));
        };
    } else {
        powerAssert = function powerAssert () {
            return assertFunction.apply(null, slice.apply(arguments));
        };
    }
    extend(powerAssert, assertFunction);
    return extend(powerAssert, enhancement);
}

function isEmpowered (assertObjectOrFunction) {
    return (typeof assertObjectOrFunction._capt === 'function') && (typeof assertObjectOrFunction._expr === 'function');
}

empower.defaultOptions = defaultOptions;
module.exports = empower;

},{"./lib/capturable":2,"./lib/decorator":4,"./lib/default-options":5,"define-properties":10,"object-create":27,"xtend/mutable":35}],2:[function(_dereq_,module,exports){
'use strict';

module.exports = function capturable () {
    var events = [];

    function _capt (value, espath) {
        events.push({value: value, espath: espath});
        return value;
    }

    function _expr (value, args) {
        var captured = events;
        events = [];
        var source = {
            content: args.content,
            filepath: args.filepath,
            line: args.line
        };
        if (args.generator) {
            source.generator = true;
        }
        if (args.async) {
            source.async = true;
        }
        return {
            powerAssertContext: {
                value: value,
                events: captured
            },
            source: source
        };
    }

    return {
        _capt: _capt,
        _expr: _expr
    };
};

},{}],3:[function(_dereq_,module,exports){
'use strict';

var slice = Array.prototype.slice;
var map = _dereq_('array-map');
var some = _dereq_('array-some');

function decorate (callSpec, decorator) {
    var func = callSpec.func;
    var thisObj = callSpec.thisObj;
    var numArgsToCapture = callSpec.numArgsToCapture;

    return function decoratedAssert () {
        var context, message, args = slice.apply(arguments);
        if (some(args, isCaptured)) {
            var values = map(args.slice(0, numArgsToCapture), function (arg) {
                if (isNotCaptured(arg)) {
                    return arg;
                }
                if (!context) {
                    context = {
                        source: arg.source,
                        args: []
                    };
                }
                context.args.push({
                    value: arg.powerAssertContext.value,
                    events: arg.powerAssertContext.events
                });
                return arg.powerAssertContext.value;
            });

            if (numArgsToCapture === (args.length - 1)) {
                message = args[args.length - 1];
            }

            var invocation = {
                thisObj: thisObj,
                func: func,
                values: values,
                message: message
            };
            return decorator.concreteAssert(invocation, context);
        } else {
            return func.apply(thisObj, args);
        }
    };
}

function isNotCaptured (value) {
    return !isCaptured(value);
}

function isCaptured (value) {
    return (typeof value === 'object') &&
        (value !== null) &&
        (typeof value.powerAssertContext !== 'undefined');
}

module.exports = decorate;

},{"array-map":8,"array-some":9}],4:[function(_dereq_,module,exports){
'use strict';

var escallmatch = _dereq_('escallmatch');
var extend = _dereq_('xtend/mutable');
var forEach = _dereq_('array-foreach');
var map = _dereq_('array-map');
var filter = _dereq_('array-filter');
var decorate = _dereq_('./decorate');


function Decorator (receiver, formatter, config) {
    this.receiver = receiver;
    this.formatter = formatter;
    this.config = config;
    this.matchers = map(config.patterns, escallmatch);
    this.eagerEvaluation = !(config.modifyMessageOnRethrow || config.saveContextOnRethrow);
}

Decorator.prototype.enhancement = function () {
    var that = this;
    var container = this.container();
    forEach(filter(this.matchers, methodCall), function (matcher) {
        var methodName = detectMethodName(matcher.calleeAst());
        if (typeof that.receiver[methodName] === 'function') {
            var callSpec = {
                thisObj: that.receiver,
                func: that.receiver[methodName],
                numArgsToCapture: numberOfArgumentsToCapture(matcher)
            };
            container[methodName] = decorate(callSpec, that);
        }
    });
    return container;
};

Decorator.prototype.container = function () {
    var basement = {};
    if (typeof this.receiver === 'function') {
        var candidates = filter(this.matchers, functionCall);
        if (candidates.length === 1) {
            var callSpec = {
                thisObj: null,
                func: this.receiver,
                numArgsToCapture: numberOfArgumentsToCapture(candidates[0])
            };
            basement = decorate(callSpec, this);
        }
    }
    return basement;
};

Decorator.prototype.concreteAssert = function (invocation, context) {
    var func = invocation.func;
    var thisObj = invocation.thisObj;
    var args = invocation.values;
    var message = invocation.message;
    if (this.eagerEvaluation) {
        var poweredMessage = this.buildPowerAssertText(message, context);
        return func.apply(thisObj, args.concat(poweredMessage));
    }
    try {
        return func.apply(thisObj, args.concat(message));
    } catch (e) {
        throw this.errorToRethrow(e, message, context);
    }
};

Decorator.prototype.errorToRethrow = function (e, originalMessage, context) {
    if (e.name !== 'AssertionError') {
        return e;
    }
    if (typeof this.receiver.AssertionError !== 'function') {
        return e;
    }
    var f = new this.receiver.AssertionError({
        actual: e.actual,
        expected: e.expected,
        operator: e.operator,
        message: this.config.modifyMessageOnRethrow ? this.buildPowerAssertText(originalMessage, context) : e.message,
        stackStartFunction: Decorator.prototype.concreteAssert
    });
    if (this.config.saveContextOnRethrow) {
        f.powerAssertContext = context;
    }
    return f;
};

Decorator.prototype.buildPowerAssertText = function (message, context) {
    var powerAssertText = this.formatter(context);
    return message ? message + ' ' + powerAssertText : powerAssertText;
};


function numberOfArgumentsToCapture (matcher) {
    var argSpecs = matcher.argumentSignatures();
    var len = argSpecs.length;
    var lastArg;
    if (0 < len) {
        lastArg = argSpecs[len - 1];
        if (lastArg.name === 'message' && lastArg.kind === 'optional') {
            len -= 1;
        }
    }
    return len;
}


function detectMethodName (node) {
    if (node.type === 'MemberExpression') {
        return node.property.name;
    }
    return null;
}


function functionCall (matcher) {
    return matcher.calleeAst().type === 'Identifier';
}


function methodCall (matcher) {
    return matcher.calleeAst().type === 'MemberExpression';
}


module.exports = Decorator;

},{"./decorate":3,"array-filter":6,"array-foreach":7,"array-map":8,"escallmatch":12,"xtend/mutable":35}],5:[function(_dereq_,module,exports){
'use strict';

module.exports = function defaultOptions () {
    return {
        destructive: false,
        modifyMessageOnRethrow: false,
        saveContextOnRethrow: false,
        patterns: [
            'assert(value, [message])',
            'assert.ok(value, [message])',
            'assert.equal(actual, expected, [message])',
            'assert.notEqual(actual, expected, [message])',
            'assert.strictEqual(actual, expected, [message])',
            'assert.notStrictEqual(actual, expected, [message])',
            'assert.deepEqual(actual, expected, [message])',
            'assert.notDeepEqual(actual, expected, [message])',
            'assert.deepStrictEqual(actual, expected, [message])',
            'assert.notDeepStrictEqual(actual, expected, [message])'
        ]
    };
};

},{}],6:[function(_dereq_,module,exports){

/**
 * Array#filter.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Object=} self
 * @return {Array}
 * @throw TypeError
 */

module.exports = function (arr, fn, self) {
  if (arr.filter) return arr.filter(fn, self);
  if (void 0 === arr || null === arr) throw new TypeError;
  if ('function' != typeof fn) throw new TypeError;
  var ret = [];
  for (var i = 0; i < arr.length; i++) {
    if (!hasOwn.call(arr, i)) continue;
    var val = arr[i];
    if (fn.call(self, val, i, arr)) ret.push(val);
  }
  return ret;
};

var hasOwn = Object.prototype.