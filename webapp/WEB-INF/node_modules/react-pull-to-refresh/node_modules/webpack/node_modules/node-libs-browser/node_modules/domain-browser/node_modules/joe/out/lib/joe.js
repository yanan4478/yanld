// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitterGrouped, Suite, Task, TaskGroup, Test, isBrowser, isWindows, joe, joePrivate, key, util, value, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  util = require('util');

  EventEmitterGrouped = require('event-emitter-grouped').EventEmitterGrouped;

  _ref = require('taskgroup'), Task = _ref.Task, TaskGroup = _ref.TaskGroup;

  isBrowser = typeof window !== "undefined" && window !== null;

  isWindows = (typeof process !== "undefined" && process !== null ? (_ref1 = process.platform) != null ? _ref1.indexOf('win') : void 0 : void 0) === 0;

  Test = (function(_super) {
    __extends(_Class, _super);

    _Class.create = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    _Class.isTest = function(test) {
      return test instanceof Test;
    };

    function _Class() {
      _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.setConfig = function() {
      var after, before, me;
      _Class.__super__.setConfig.apply(this, arguments);
      me = this;
      if (before = this.config.before) {
        delete this.config.before;
        this.on('before', function(complete) {
          return before.call(this, me, complete);
        });
      }
      if (after = this.config.after) {
        delete this.config.after;
        this.on('after', function(complete) {
          return after.call(this, me, complete);
        });
      }
      return this;
    };

    _Class.prototype.run = function() {
      if (this.hasStarted() === false) {
        this.emitSerial('before', (function(_this) {
          return function(err) {
            if (err) {
              _this.emit('error', err);
            }
            return _Class.__super__.run.apply(_this, arguments);
          };
        })(this));
      } else {
        _Class.__super__.run.apply(this, arguments);
      }
      return this;
    };

    _Class.prototype.complete = function() {
      if (this.isComplete()) {
        this.emitSerial('after', (function(_this) {
          return function(err) {
            if (err) {
              _this.emit('error', err);
            }
            return _Class.__super__.complete.apply(_this, arguments);
          };
        })(this));
      } else {
        _Class.__super__.complete.apply(this, arguments);
      }
      return this;
    };

    return _Class;

  })(Task);

  Suite = (function(_super) {
    __extends(_Class, _super);

    _Class.create = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    _Class.isSuite = function(suite) {
      return suite instanceof Suite;
    };

    function _Class() {
      var me, nestedListener;
      _Class.__super__.constructor.apply(this, arguments);
      me = this;
      this.on('item.add', function(item) {
        if (Test.isTest(item)) {
          item.on('started', function() {
            return me.testRunCallback(item);
          });
          item.done(function(err) {
            return me.testCompleteCallback(item, err);
          });
          item.on('before', function(complete) {
            return me.emitSerial('test.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('test.after', item, complete);
          });
        } else if (Suite.isSuite(item)) {
          item.on('started', function() {
            return me.suiteRunCallback(item);
          });
          item.done(function(err) {
            return me.suiteCompleteCallback(item, err);
          });
          item.on('before', function(complete) {
            return me.emitSerial('suite.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('suite.after', item, complete);
          });
        }
      });
      this.on('item.add', nestedListener = function(item) {
        if (Test.isTest(item)) {
          item.on('before', function(complete) {
            return me.emitSerial('nested.test.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('nested.test.after', item, complete);
          });
        }