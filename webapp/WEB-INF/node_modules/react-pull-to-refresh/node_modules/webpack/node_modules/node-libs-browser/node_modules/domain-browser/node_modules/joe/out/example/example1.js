// Generated by CoffeeScript 1.7.1

/*
@TODO

- add suite.before, and suite.after examples
- add nested.task.before, nested.task.after, nested.suite.before, nested.suite.after examples
 */

(function() {
  var assert, expect, joe, wait;

  assert = require('assert');

  joe = require('../..');

  expect = require('chai').expect;

  wait = function(delay, fn) {
    return setTimeout(fn, delay);
  };

  joe.suite('example1', function(suite, test) {
    test('api is readonly within node', function() {
      if ((typeof window !== "undefined" && window !== null) === false) {
        joe.blah = true;
        return expect(joe.blah != null, 'modification test').to.equal(false);
      }
    });
    return suite('tests', function(suite, test) {
      suite('async-tests', function(suite, test) {
        var checks;
        checks = [];
        test('1/2', function(done) {
          return wait(1 * 1000, function() {
            checks.push(1);
            expect(checks).to.deep.equal([1]);
            return done();
          });
        });
        return test('2/2', function(done) {
          return wait(2 * 1000, function() {
            checks.push(2);
            expect(checks).to.deep.equal([1, 2]);
            return done();
          });
        });
      });
      suite('sync', function(suite, test) {
        var checks;
        checks = [];
        test('1/2', function() {
          checks.push(1);
          return expect(checks).to.deep.equal([1]);
        });
        return test('2/2', function() {
          checks.push(2);
          return expect(checks).to.deep.equal([1, 2]);
        });
      });
      suite('async-sync', function(suite, test) {
        var checks;
        checks = [];
        test('1/2', function(done) {
          return wait(1 * 1000, function() {
            checks.push(1);
            expect(checks).to.deep.equal([1]);
            return done();
          });
        });
        return test('2/2', function() {
          checks.push(2);
          return expect(checks).to.deep.equal([1, 2]);
        });
      });
      suite('async-suite', function(suite, test, done) {
        var checks;
        checks = [];
        wait(1 * 1000, function() {
          return test('1/2', function() {
            return checks.push(1);
          });
        });
        wait(2 * 1000, function() {
          return test('2/2', function() {
            return checks.push(2);
          });
        });
        wait(3 * 1000, function() {
          checks.push(3);
          return done();
        });
        return wait(4 * 1000, function() {
          checks.push(4);
          return expect(checks).to.deep.equal([3, 1, 2, 4]);
        });
      });
      suite('before and after', function(suite, test) {
        var after, before, checks;
        checks = [];
        this.on('test.before', function(test, complete) {
          checks.push("before - " + test.config.name + " - part 1");
          return wait(100, function() {
            checks.push("before - " + test.config.name + " - part 2");
            return complete();
          });
        });
        this.on('test.after', function(test, complete) {
          checks.push("after - " + test.config.name + " - part 1");
          return wait(100, function() {
            checks.push("after - " + test.config.name + " - part 2");
            return complete();
          });
        });
        test('test 1', function() {
          checks.push('test 1');
          return expect(checks).to.deep.equal(['before - test 1 - part 1', 'before - test 1 - part 2', 'test 1']);
        });
        test('test 2', function() {
          checks.push('test 2');
          return expect(checks).to.deep.equal(['before - test 1 - part 1', 'before - test 1 - part 2', 'test 1', 'after - test 1 - part 1', 'after - test 1 - part 2', 'before - test 2 - part 1', 'before - test 2 - part 2', 'test 2']);
        });
        before = function(test, complete) {
          checks.push("only before - " + test.config.name + " - part 1");
          return wait(100, function() {
            checks.push("only before - " + test.config.name + " - part 2");
            return complete();
          });
        };
        after = function(test, complete) {
          checks.push("only after - " + test.config.name + " - part 1");
          return wait(100, function() {
            checks.push("only after - " + test.config.name + " - part 2");
            return complete();
          });
        };
        test('test 3', {
          before: before,
          after: after
        }, function() {
          checks.push('test 3');
          return expect(checks, 'test 3 checks').to.deep.equal(['before - test 1 - part 1', 'before - test 1 - part 2', 'test 1', 'after - test 1 - part 1', 'after - test 1 - part 2', 'before - test 2 - part 1', 'before - test 2 - part 2', 'test 2', 'after - test 2 - part 1', 'after - test 2 - part 2', 'only before - test 3 - part 1', 'only before - test 3 - part 2', 'before - test 3 - part 1', 'before - test 3 - part 2', 'test 3']);
        });
        return test('test 4', function() {
          checks.push('test 4');
          return expect(checks, 'test 4 checks').to.deep.equal(['before - test 1 - part 1', 'before - test 1 - part 2', 'test 1', 'after - test 1 - part 1', 'after - test 1 - part 2', 'before - test 2 - part 1', 'before - test 2 - part 2', 'test 2', 'after - test 2 - part 1', 'after - test 2 - part 2', 'only before - test 3 - part 1', 'only before - test 3 - part 2', 'before - test 3 - part 1', 'before - test 3 - part 2', 'test 3', 'only after - test 3 - part 1', 'only after - test 3 - part 2', 'after - test 3 - part 1', 'after - test 3 - part 2', 'before - test 4 - part 1', 'before - test 4 - part 2', 'test 4']);
        });
      });
      suite('deliberate-failure ignored', function(suite, test) {
        var err1, err2;
        err1 = new Error('deliberate error 1');
        err2 = new Error('deliberate error 2');
        this.setConfig({
          onError: 'ignore'
        });
        test('1/2', function() {
          throw err1;
        });
        test('2/2', function(done) {
          return done(err2);
        });
        return this.done(function(err, results) {
          expect(err).to.equal(null);
          return expect(results).to.equal([[err1], [err2]]);
        });
      });
      return suite('deliberate-failure', function(suite, test) {
        test('1/2', function(done) {
          return wait(1 * 1000, function() {
            throw new Error('deliberate error');
            return done();
          });
        });
        return test('2/2', function() {
          throw new Error('unexpected error');
        });
      });
    });
  });

}).call(this);
